// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: evodevice-giver.proto

package evodevice_giver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DeviceGiver_GetList_FullMethodName = "/evodevice_giver.DeviceGiver/GetList"
)

// DeviceGiverClient is the client API for DeviceGiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGiverClient interface {
	GetList(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
}

type deviceGiverClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGiverClient(cc grpc.ClientConnInterface) DeviceGiverClient {
	return &deviceGiverClient{cc}
}

func (c *deviceGiverClient) GetList(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, DeviceGiver_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGiverServer is the server API for DeviceGiver service.
// All implementations must embed UnimplementedDeviceGiverServer
// for forward compatibility
type DeviceGiverServer interface {
	GetList(context.Context, *DeviceRequest) (*DeviceResponse, error)
	mustEmbedUnimplementedDeviceGiverServer()
}

// UnimplementedDeviceGiverServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceGiverServer struct {
}

func (UnimplementedDeviceGiverServer) GetList(context.Context, *DeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedDeviceGiverServer) mustEmbedUnimplementedDeviceGiverServer() {}

// UnsafeDeviceGiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGiverServer will
// result in compilation errors.
type UnsafeDeviceGiverServer interface {
	mustEmbedUnimplementedDeviceGiverServer()
}

func RegisterDeviceGiverServer(s grpc.ServiceRegistrar, srv DeviceGiverServer) {
	s.RegisterService(&DeviceGiver_ServiceDesc, srv)
}

func _DeviceGiver_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGiverServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGiver_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGiverServer).GetList(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGiver_ServiceDesc is the grpc.ServiceDesc for DeviceGiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evodevice_giver.DeviceGiver",
	HandlerType: (*DeviceGiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _DeviceGiver_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evodevice-giver.proto",
}
