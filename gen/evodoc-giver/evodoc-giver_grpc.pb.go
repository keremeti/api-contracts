// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: evodoc-giver.proto

package evodoc_giver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	anypb "google.golang.org/protobuf/types/known/anypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EvodocGiver_GetList_FullMethodName = "/evodoc_giver.EvodocGiver/GetList"
	EvodocGiver_Get_FullMethodName     = "/evodoc_giver.EvodocGiver/Get"
)

// EvodocGiverClient is the client API for EvodocGiver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvodocGiverClient interface {
	GetList(ctx context.Context, in *DocListRequest, opts ...grpc.CallOption) (*DocListResponse, error)
	Get(ctx context.Context, in *DocRequest, opts ...grpc.CallOption) (*anypb.Any, error)
}

type evodocGiverClient struct {
	cc grpc.ClientConnInterface
}

func NewEvodocGiverClient(cc grpc.ClientConnInterface) EvodocGiverClient {
	return &evodocGiverClient{cc}
}

func (c *evodocGiverClient) GetList(ctx context.Context, in *DocListRequest, opts ...grpc.CallOption) (*DocListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocListResponse)
	err := c.cc.Invoke(ctx, EvodocGiver_GetList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evodocGiverClient) Get(ctx context.Context, in *DocRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, EvodocGiver_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvodocGiverServer is the server API for EvodocGiver service.
// All implementations must embed UnimplementedEvodocGiverServer
// for forward compatibility.
type EvodocGiverServer interface {
	GetList(context.Context, *DocListRequest) (*DocListResponse, error)
	Get(context.Context, *DocRequest) (*anypb.Any, error)
	mustEmbedUnimplementedEvodocGiverServer()
}

// UnimplementedEvodocGiverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEvodocGiverServer struct{}

func (UnimplementedEvodocGiverServer) GetList(context.Context, *DocListRequest) (*DocListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedEvodocGiverServer) Get(context.Context, *DocRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEvodocGiverServer) mustEmbedUnimplementedEvodocGiverServer() {}
func (UnimplementedEvodocGiverServer) testEmbeddedByValue()                     {}

// UnsafeEvodocGiverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvodocGiverServer will
// result in compilation errors.
type UnsafeEvodocGiverServer interface {
	mustEmbedUnimplementedEvodocGiverServer()
}

func RegisterEvodocGiverServer(s grpc.ServiceRegistrar, srv EvodocGiverServer) {
	// If the following call pancis, it indicates UnimplementedEvodocGiverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EvodocGiver_ServiceDesc, srv)
}

func _EvodocGiver_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvodocGiverServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvodocGiver_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvodocGiverServer).GetList(ctx, req.(*DocListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvodocGiver_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvodocGiverServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EvodocGiver_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvodocGiverServer).Get(ctx, req.(*DocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EvodocGiver_ServiceDesc is the grpc.ServiceDesc for EvodocGiver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvodocGiver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evodoc_giver.EvodocGiver",
	HandlerType: (*EvodocGiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _EvodocGiver_GetList_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EvodocGiver_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evodoc-giver.proto",
}
